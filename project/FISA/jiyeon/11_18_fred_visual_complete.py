# -*- coding: utf-8 -*-
"""fred_visual_complete.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XktmJOWylKuhqROJh-NHMajzk8xAfLoj
"""

"""
설치해야 할 것
# !pip install fredapi
# !pip install fredapi plotly pandas
# !pip install django
"""

import pandas_datareader.data as web
import datetime

from fredapi import Fred
import pandas as pd

""" FRED API 키 env로 불러와야 합니다. """

# views.py
from django.shortcuts import render
import plotly.graph_objects as go
from plotly.io import to_html
import pandas as pd
from fredapi import Fred
from datetime import datetime

def generate_fred_graphs(request):
    # FRED API 설정
    fred = Fred(api_key=FRED_API_KEY)
    end_date = datetime.today().strftime('%Y-%m-%d')

    # 데이터 조회 함수
    def fetch_data(series_id, start_date='2015-01-01'):
        try:
            data = fred.get_series(series_id, observation_start=start_date, observation_end=end_date)
            return data
        except ValueError as e:
            print(f"Error fetching data for {series_id}: {e}")
            return None

    # 데이터 준비
    data_frames = {
        'FFTR': fetch_data('DFEDTARU'),
        'GDP': fetch_data('GDP'),
        'GDP Growth Rate': fetch_data('A191RL1Q225SBEA'),
        'PCE': fetch_data('PCE'),
        'Core PCE': fetch_data('PCEPILFE'),
        'CPI': fetch_data('CPIAUCSL'),
        'Core CPI': fetch_data('CPILFESL'),
        'Personal Income': fetch_data('PI'),
        'Unemployment Rate': fetch_data('UNRATE'),
        'ISM Manufacturing': fetch_data('MANEMP'),
        'Durable Goods Orders': fetch_data('DGORDER'),
        'Building Permits': fetch_data('PERMIT'),
        'Retail Sales': fetch_data('RSAFS'),
        'Consumer Sentiment': fetch_data('UMCSENT'),
        'Nonfarm Payrolls': fetch_data('PAYEMS'),
        'JOLTS Hires': fetch_data('JTSHIL')
    }

    # 지표별 발표 일정
    release_schedule = {
        'FFTR': "FOMC 정례회의 후 (연 8회)",
        'Unemployment Rate': "매월 첫째 주 금요일",
        'CPI': "매월 15일경",
        'Nonfarm Payrolls': "매월 첫째 주 금요일",
        'Core CPI': "CPI와 동시 발표",
        'Core PCE': "PCE와 동시 발표",
        'GDP': "매달 마지막 주",
        'PCE': "매월 둘째 주 금요일",
        'GDP Growth Rate': "GDP와 동시 발표",
        'ISM Manufacturing': "매월 2~3일경",
        'JOLTS Hires': "매월 첫째주",
        'Consumer Sentiment': "매월 중순(잠정치)/말(확정치)",
        'Retail Sales': "매월 중순경",
        'Durable Goods Orders': "매월 마지막 주",
        'Building Permits': "매월 중순경",
        'Personal Income': "매월 말경"
    }

    # 지표별 한글 설명
    indicator_descriptions = {
        'GDP': "국내총생산",
        'GDP Growth Rate': "GDP 성장률",
        'FFTR': "연방기금금리",
        'CPI': "소비자물가지수",
        'Core CPI': "근원 소비자물가지수",
        'Core PCE': "근원 개인소비지출",
        'PCE': "개인소비지출",
        'Unemployment Rate': "실업률",
        'Nonfarm Payrolls': "비농업부문 고용",
        'Personal Income': "개인소득",
        'ISM Manufacturing': "제조업 고용",
        'Durable Goods Orders': "내구재 주문",
        'Building Permits': "건축허가",
        'Retail Sales': "소매판매",
        'Consumer Sentiment': "소비자심리지수",
        'JOLTS Hires': "신규채용"
    }

    # 중요도 설정
    importance_levels = {
        'GDP': "★★★",
        'GDP Growth Rate': "★★★",
        'FFTR': "★★★",
        'CPI': "★★★",
        'Core CPI': "★★★",
        'Core PCE': "★★★",
        'PCE': "★★★",
        'Unemployment Rate': "★★★",
        'Nonfarm Payrolls': "★★★",
        'Personal Income': "★★",
        'ISM Manufacturing': "★★",
        'Durable Goods Orders': "★★",
        'Building Permits': "★★",
        'Retail Sales': "★★",
        'Consumer Sentiment': "★★",
        'JOLTS Hires': "★★"
    }

    # 데이터프레임 생성
    df = pd.DataFrame()
    for key, value in data_frames.items():
        if value is not None:
            temp_df = value.reset_index()
            temp_df.columns = ['date', key]
            if df.empty:
                df = temp_df
            else:
                df = pd.merge(df, temp_df, on='date', how='outer')

    # 결측값 처리
    df_filled = df.sort_values(by='date').fillna(method='ffill')

    # 숫자 포맷팅 함수
    def format_value(value, indicator):
        if indicator in ['GDP Growth Rate', 'FFTR', 'Unemployment Rate']:
            return f"{value:.1f}%"
        elif indicator in ['GDP', 'PCE', 'Personal Income', 'Durable Goods Orders', 'Retail Sales']:
            return f"${value:.1f}B"
        elif indicator in ['Nonfarm Payrolls', 'ISM Manufacturing', 'Building Permits', 'JOLTS Hires']:
            return f"{value:.1f}K"
        elif indicator in ['CPI', 'Core CPI', 'Core PCE', 'Consumer Sentiment']:
            return f"{value:.1f}"
        else:
            return f"{value:.1f}"

    # 1. GDP와 금리 그래프
    fig1 = go.Figure()

    fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['GDP Growth Rate'],
                            mode='lines', name='GDP 성장률',
                            line=dict(color='blue', width=2)))

    fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['FFTR'],
                            mode='lines', name='연방기금금리(FFTR)',
                            line=dict(color='red'), yaxis='y2'))

    fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Unemployment Rate'],
                            mode='lines', name='실업률',
                            line=dict(color='green'), yaxis='y2'))

    fig1.update_layout(
        title='GDP 성장률과 연방기금금리, 실업률 비교',
        xaxis_title='날짜',
        yaxis=dict(
            title='GDP 성장률 (%)',
            titlefont=dict(color='blue'),
            tickfont=dict(color='blue')
        ),
        yaxis2=dict(
            title='연방기금금리(FFTR) 및 실업률 (%)',
            titlefont=dict(color='red'),
            tickfont=dict(color='red'),
            anchor='x',
            overlaying='y',
            side='right'
        ),
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(color='black'),
        showlegend=True,
        legend=dict(x=0, y=1),
        xaxis=dict(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgrey'
        ),
        yaxis_showgrid=True,
        yaxis_gridwidth=1,
        yaxis_gridcolor='lightgrey'
    )

    # 2. 물가 지표 그래프
    fig2 = go.Figure()

    fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['CPI'],
                            mode='lines', name='CPI',
                            line=dict(color='blue', width=2)))

    fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Core PCE'],
                            mode='lines', name='Core PCE',
                            line=dict(color='red', width=2)))

    fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Core CPI'],
                            mode='lines', name='Core CPI',
                            line=dict(color='green', width=2)))

    fig2.update_layout(
        title='물가지표 추이',
        xaxis_title='날짜',
        yaxis_title='변화율 (%)',
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(color='black'),
        showlegend=True,
        legend=dict(x=0, y=1),
        xaxis=dict(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgrey'
        ),
        yaxis=dict(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgrey'
        )
    )

    # 3. 소비자 동향 그래프
    fig3 = go.Figure()

    fig3.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Consumer Sentiment'],
                            mode='lines', name='소비자심리지수',
                            line=dict(color='purple', width=2)))

    fig3.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Retail Sales'],
                            mode='lines', name='소매판매',
                            line=dict(color='orange', width=2),
                            yaxis='y2'))

    fig3.update_layout(
        title='소비자 심리 및 소매판매 동향',
        xaxis_title='날짜',
        yaxis=dict(
            title='소비자심리지수',
            titlefont=dict(color='purple'),
            tickfont=dict(color='purple')
        ),
        yaxis2=dict(
            title='소매판매 (십억 달러)',
            titlefont=dict(color='orange'),
            tickfont=dict(color='orange'),
            anchor='x',
            overlaying='y',
            side='right'
        ),
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(color='black'),
        showlegend=True,
        legend=dict(x=0, y=1),
        xaxis=dict(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgrey'
        ),
        yaxis_showgrid=True,
        yaxis_gridwidth=1,
        yaxis_gridcolor='lightgrey'
    )

    # 4. 고용 시장 동향
    fig4 = go.Figure()

    fig4.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Nonfarm Payrolls'],
                            mode='lines', name='비농업부문 고용',
                            line=dict(color='blue', width=2)))

    fig4.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['JOLTS Hires'],
                            mode='lines', name='신규 채용',
                            line=dict(color='red', width=2),
                            yaxis='y2'))

    fig4.update_layout(
        title='고용 시장 동향',
        xaxis_title='날짜',
        yaxis=dict(
            title='비농업부문 고용 (천명)',
            titlefont=dict(color='blue'),
            tickfont=dict(color='blue')
        ),
        yaxis2=dict(
            title='신규 채용 (천명)',
            titlefont=dict(color='red'),
            tickfont=dict(color='red'),
            anchor='x',
            overlaying='y',
            side='right'
        ),
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(color='black'),
        showlegend=True,
        legend=dict(x=0, y=1),
        xaxis=dict(
            showgrid=True,
            gridwidth=1,
            gridcolor='lightgrey'
        ),
        yaxis_showgrid=True,
        yaxis_gridwidth=1,
        yaxis_gridcolor='lightgrey'
    )

    # 테이블 데이터 준비
    events_data = []
    for column in df_filled.columns:
        if column != 'date':
            latest = df_filled[column].iloc[-1]

            changes = df_filled[column].diff() != 0
            change_points = df_filled[changes].index

            if len(change_points) > 1:
                previous = df_filled[column].iloc[change_points[-2]]
            else:
                previous = df_filled[column].iloc[0]

            formatted_latest = format_value(latest, column)
            formatted_previous = format_value(previous, column)

            events_data.append([
                indicator_descriptions[column],
                column,
                formatted_latest,
                formatted_previous,
                release_schedule[column],
                importance_levels[column]
            ])

    # 중요도 순으로 정렬
    events_data.sort(key=lambda x: (len(x[5]), x[0]), reverse=True)

    # 테이블 생성
    table_fig = go.Figure(data=[go.Table(
        header=dict(
            values=['지표명', '코드', '현재', '이전', '발표 일정', '중요도'],
            fill_color='royalblue',
            align='left',
            font=dict(color='white', size=12)
        ),
        cells=dict(
            values=list(zip(*events_data)),
            fill_color=[['white', '#f9f9f9'] * len(events_data)],
            align='left',
            font=dict(color=['black'], size=11),
            height=30
        )
    )])

    table_fig.update_layout(
        title={
            'text': '주요 경제 지표 현황',
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top',
            'font': dict(size=20)
        },
        width=1200,
        height=800,
        margin=dict(t=100, l=50, r=50, b=50)
    )

    # HTML로 변환
    graph1_html = to_html(fig1, full_html=False)
    graph2_html = to_html(fig2, full_html=False)
    graph3_html = to_html(fig3, full_html=False)
    graph4_html = to_html(fig4, full_html=False)
    table_html = to_html(table_fig, full_html=False)

    context = {
        'table': table_html,
        'graph1': graph1_html,
        'graph2': graph2_html,
        'graph3': graph3_html,
        'graph4': graph4_html
    }

    return render(request, 'economic_dashboard.html', context)

"""# colab 시각화 확인용 코드"""

import pandas_datareader.data as web
from datetime import datetime
from fredapi import Fred
import pandas as pd
import plotly.graph_objects as go

# FRED API 키 설정
fred = Fred(api_key=FRED_API_KEY)

# 현재 날짜를 end_date로 사용
end_date = datetime.today().strftime('%Y-%m-%d')

# 데이터 가져오기 함수
def fetch_data(series_id, start_date='2015-01-01', end_date=end_date):
    try:
        data = fred.get_series(series_id, observation_start=start_date, observation_end=end_date)
        return data
    except ValueError as e:
        print(f"Error fetching data for {series_id}: {e}")
        return None

# 주요 지표 데이터 조회
data_frames = {
    'FFTR': fetch_data('DFEDTARU'),
    'GDP': fetch_data('GDP'),
    'GDP Growth Rate': fetch_data('A191RL1Q225SBEA'),
    'PCE': fetch_data('PCE'),
    'Core PCE': fetch_data('PCEPILFE'),
    'CPI': fetch_data('CPIAUCSL'),
    'Core CPI': fetch_data('CPILFESL'),
    'Personal Income': fetch_data('PI'),
    'Unemployment Rate': fetch_data('UNRATE'),
    'ISM Manufacturing': fetch_data('MANEMP'),
    'Durable Goods Orders': fetch_data('DGORDER'),
    'Building Permits': fetch_data('PERMIT'),
    'Retail Sales': fetch_data('RSAFS'),
    'Consumer Sentiment': fetch_data('UMCSENT'),
    'Nonfarm Payrolls': fetch_data('PAYEMS'),
    'JOLTS Hires': fetch_data('JTSHIL')
}

# 데이터프레임 생성
df = pd.DataFrame()
for key, value in data_frames.items():
    if value is not None:
        temp_df = value.reset_index()
        temp_df.columns = ['date', key]
        if df.empty:
            df = temp_df
        else:
            df = pd.merge(df, temp_df, on='date', how='outer')

# 결측값 처리
df_filled = df.sort_values(by='date').fillna(method='ffill')

# 1. GDP와 금리 그래프
fig1 = go.Figure()

fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['GDP Growth Rate'],
                        mode='lines', name='GDP 성장률',
                        line=dict(color='blue', width=2)))

fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['FFTR'],
                        mode='lines', name='연방기금금리(FFTR)',
                        line=dict(color='red'), yaxis='y2'))

fig1.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Unemployment Rate'],
                        mode='lines', name='실업률',
                        line=dict(color='green'), yaxis='y2'))

fig1.update_layout(
    title='GDP 성장률과 연방기금금리, 실업률 비교',
    xaxis_title='날짜',
    yaxis=dict(
        title='GDP 성장률 (%)',
        titlefont=dict(color='blue'),
        tickfont=dict(color='blue')
    ),
    yaxis2=dict(
        title='연방기금금리(FFTR) 및 실업률 (%)',
        titlefont=dict(color='red'),
        tickfont=dict(color='red'),
        anchor='x',
        overlaying='y',
        side='right'
    ),
    plot_bgcolor='white',
    paper_bgcolor='white',
    font=dict(color='black'),
    showlegend=True,
    legend=dict(x=0, y=1),
    xaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis_showgrid=True,
    yaxis_gridwidth=1,
    yaxis_gridcolor='lightgrey'
)

# 2. 물가 지표 그래프
fig2 = go.Figure()

fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['CPI'],
                        mode='lines', name='CPI',
                        line=dict(color='blue', width=2)))

fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Core PCE'],
                        mode='lines', name='Core PCE',
                        line=dict(color='red', width=2)))

fig2.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Core CPI'],
                        mode='lines', name='Core CPI',
                        line=dict(color='green', width=2)))

fig2.update_layout(
    title='물가지표 추이',
    xaxis_title='날짜',
    yaxis_title='변화율 (%)',
    plot_bgcolor='white',
    paper_bgcolor='white',
    font=dict(color='black'),
    showlegend=True,
    legend=dict(x=0, y=1),
    xaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    )
)

# 3. 소비자 동향 그래프
fig3 = go.Figure()

fig3.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Consumer Sentiment'],
                        mode='lines', name='소비자심리지수',
                        line=dict(color='purple', width=2)))

fig3.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Retail Sales'],
                        mode='lines', name='소매판매',
                        line=dict(color='orange', width=2),
                        yaxis='y2'))

fig3.update_layout(
    title='소비자 심리 및 소매판매 동향',
    xaxis_title='날짜',
    yaxis=dict(
        title='소비자심리지수',
        titlefont=dict(color='purple'),
        tickfont=dict(color='purple')
    ),
    yaxis2=dict(
        title='소매판매 (십억 달러)',
        titlefont=dict(color='orange'),
        tickfont=dict(color='orange'),
        anchor='x',
        overlaying='y',
        side='right'
    ),
    plot_bgcolor='white',
    paper_bgcolor='white',
    font=dict(color='black'),
    showlegend=True,
    legend=dict(x=0, y=1),
    xaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis_showgrid=True,
    yaxis_gridwidth=1,
    yaxis_gridcolor='lightgrey'
)

# 4. 고용 시장 동향
fig4 = go.Figure()

fig4.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['Nonfarm Payrolls'],
                        mode='lines', name='비농업부문 고용',
                        line=dict(color='blue', width=2)))

fig4.add_trace(go.Scatter(x=df_filled['date'], y=df_filled['JOLTS Hires'],
                        mode='lines', name='신규 채용',
                        line=dict(color='red', width=2),
                        yaxis='y2'))

fig4.update_layout(
    title='고용 시장 동향',
    xaxis_title='날짜',
    yaxis=dict(
        title='비농업부문 고용 (천명)',
        titlefont=dict(color='blue'),
        tickfont=dict(color='blue')
    ),
    yaxis2=dict(
        title='신규 채용 (천명)',
        titlefont=dict(color='red'),
        tickfont=dict(color='red'),
        anchor='x',
        overlaying='y',
        side='right'
    ),
    plot_bgcolor='white',
    paper_bgcolor='white',
    font=dict(color='black'),
    showlegend=True,
    legend=dict(x=0, y=1),
    xaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis_showgrid=True,
    yaxis_gridwidth=1,
    yaxis_gridcolor='lightgrey'
)

# 그래프 표시
fig1.show()
fig2.show()
fig3.show()
fig4.show()

import pandas_datareader.data as web
from datetime import datetime
from fredapi import Fred
import pandas as pd
import plotly.graph_objects as go

# FRED API 키 설정
fred = Fred(api_key=FRED_API_KEY)

# 현재 날짜를 end_date로 사용
end_date = datetime.today().strftime('%Y-%m-%d')

# 데이터 가져오기 함수
def fetch_data(series_id, start_date='2015-01-01', end_date=end_date):
    try:
        data = fred.get_series(series_id, observation_start=start_date, observation_end=end_date)
        return data
    except ValueError as e:
        print(f"Error fetching data for {series_id}: {e}")
        return None

# 데이터 준비
data_frames = {
    'FFTR': fetch_data('DFEDTARU'),
    'GDP': fetch_data('GDP'),
    'GDP Growth Rate': fetch_data('A191RL1Q225SBEA'),
    'PCE': fetch_data('PCE'),
    'Core PCE': fetch_data('PCEPILFE'),
    'CPI': fetch_data('CPIAUCSL'),
    'Core CPI': fetch_data('CPILFESL'),
    'Personal Income': fetch_data('PI'),
    'Unemployment Rate': fetch_data('UNRATE'),
    'ISM Manufacturing': fetch_data('MANEMP'),
    'Durable Goods Orders': fetch_data('DGORDER'),
    'Building Permits': fetch_data('PERMIT'),
    'Retail Sales': fetch_data('RSAFS'),
    'Consumer Sentiment': fetch_data('UMCSENT'),
    'Nonfarm Payrolls': fetch_data('PAYEMS'),
    'JOLTS Hires': fetch_data('JTSHIL')
}

# 지표별 발표 일정
release_schedule = {
    'FFTR': "FOMC 정례회의 후 (연 8회)",
    'Unemployment Rate': "매월 첫째 주 금요일",
    'CPI': "매월 15일경",
    'Nonfarm Payrolls': "매월 첫째 주 금요일",
    'Core CPI': "CPI와 동시 발표",
    'Core PCE': "PCE와 동시 발표",
    'GDP': "매달 마지막 주",
    'PCE': "매월 둘째 주 금요일",
    'GDP Growth Rate': "GDP와 동시 발표",
    'ISM Manufacturing': "매월 2~3일경",
    'JOLTS Hires': "매월 첫째주",
    'Consumer Sentiment': "매월 중순(잠정치)/말(확정치)",
    'Retail Sales': "매월 중순경",
    'Durable Goods Orders': "매월 마지막 주",
    'Building Permits': "매월 중순경",
    'Personal Income': "매월 말경"
}

# 지표별 한글 설명
indicator_descriptions = {
    'GDP': "국내총생산",
    'GDP Growth Rate': "GDP 성장률",
    'FFTR': "연방기금금리",
    'CPI': "소비자물가지수",
    'Core CPI': "근원 소비자물가지수",
    'Core PCE': "근원 개인소비지출",
    'PCE': "개인소비지출",
    'Unemployment Rate': "실업률",
    'Nonfarm Payrolls': "비농업부문 고용",
    'Personal Income': "개인소득",
    'ISM Manufacturing': "제조업 고용",
    'Durable Goods Orders': "내구재 주문",
    'Building Permits': "건축허가",
    'Retail Sales': "소매판매",
    'Consumer Sentiment': "소비자심리지수",
    'JOLTS Hires': "신규채용"
}

# 중요도 설정
importance_levels = {
    'GDP': "★★★",
    'GDP Growth Rate': "★★★",
    'FFTR': "★★★",
    'CPI': "★★★",
    'Core CPI': "★★★",
    'Core PCE': "★★★",
    'PCE': "★★★",
    'Unemployment Rate': "★★★",
    'Nonfarm Payrolls': "★★★",
    'Personal Income': "★★",
    'ISM Manufacturing': "★★",
    'Durable Goods Orders': "★★",
    'Building Permits': "★★",
    'Retail Sales': "★★",
    'Consumer Sentiment': "★★",
    'JOLTS Hires': "★★"
}

# 데이터프레임 생성
df = pd.DataFrame()
for key, value in data_frames.items():
    if value is not None:
        temp_df = value.reset_index()
        temp_df.columns = ['date', key]
        if df.empty:
            df = temp_df
        else:
            df = pd.merge(df, temp_df, on='date', how='outer')

# 결측값 처리
df_filled = df.sort_values(by='date').fillna(method='ffill')

# 숫자 포맷팅 함수
def format_value(value, indicator):
    if indicator in ['GDP Growth Rate', 'FFTR', 'Unemployment Rate']:
        return f"{value:.1f}%"
    elif indicator in ['GDP', 'PCE', 'Personal Income', 'Durable Goods Orders', 'Retail Sales']:
        return f"${value:.1f}B"
    elif indicator in ['Nonfarm Payrolls', 'ISM Manufacturing', 'Building Permits', 'JOLTS Hires']:
        return f"{value:.1f}K"
    elif indicator in ['CPI', 'Core CPI', 'Core PCE', 'Consumer Sentiment']:
        return f"{value:.1f}"
    else:
        return f"{value:.1f}"

# 데이터 추출 및 테이블 생성
events_data = []

for column in df_filled.columns:
    if column != 'date':  # date 컬럼 제외
        latest = df_filled[column].iloc[-1]

        # 값이 변경되는 시점 찾기
        changes = df_filled[column].diff() != 0
        change_points = df_filled[changes].index

        if len(change_points) > 1:
            previous = df_filled[column].iloc[change_points[-2]]
        else:
            previous = df_filled[column].iloc[0]

        formatted_latest = format_value(latest, column)
        formatted_previous = format_value(previous, column)

        events_data.append([
            indicator_descriptions[column],  # 한글 지표명
            column,  # 영문 코드
            formatted_latest,  # 현재 값
            formatted_previous,  # 이전 값
            release_schedule[column],  # 발표 일정
            importance_levels[column],  # 중요도
        ])

# 중요도 순으로 정렬
events_data.sort(key=lambda x: (len(x[5]), x[0]), reverse=True)

# 테이블 생성
fig = go.Figure(data=[go.Table(
    header=dict(
        values=['지표명', '코드', '현재', '이전', '발표 일정', '중요도'],
        fill_color='royalblue',
        align='left',
        font=dict(color='white', size=12)
    ),
    cells=dict(
        values=list(zip(*events_data)),
        fill_color=[['white', '#f9f9f9'] * len(events_data)],
        align='left',
        font=dict(color=['black'], size=11),
        height=30
    )
)])

fig.update_layout(
    title={
        'text': '주요 경제 지표 현황',
        'y':0.9,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': dict(size=20)
    },
    width=1200,
    height=800,
    margin=dict(t=100, l=50, r=50, b=50)
)

# 그래프 표시
fig.show()

# 데이터 확인을 위한 출력
print("\n원본 데이터 확인:")
print(df_filled.tail())

# 테이블 데이터 확인
print("\n테이블 데이터 확인:")
events_df = pd.DataFrame(events_data,
                        columns=['지표명', '코드', '현재', '이전', '발표 일정', '중요도'])
print(events_df)

"""# 추가 지표 선정"""

