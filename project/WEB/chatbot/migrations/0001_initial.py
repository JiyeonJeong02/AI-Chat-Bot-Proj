# Generated by Django 5.0.2 on 2024-12-05 03:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('group_id', models.IntegerField()),
                ('permission_id', models.IntegerField()),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type_id', models.IntegerField()),
                ('codename', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.CharField(blank=True, max_length=254, null=True)),
                ('is_staff', models.IntegerField(blank=True, null=True)),
                ('is_active', models.IntegerField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('group_id', models.IntegerField()),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('permission_id', models.IntegerField()),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CardMembers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('대분류', models.TextField(blank=True, null=True)),
                ('카드_종류', models.TextField(blank=True, db_column='카드 종류', null=True)),
                ('사용구분', models.TextField(blank=True, null=True)),
                ('회원_관련_정보', models.TextField(blank=True, db_column='회원 관련 정보', null=True)),
                ('롯데카드', models.FloatField(blank=True, null=True)),
                ('비씨카드_자체_field', models.FloatField(blank=True, db_column='비씨카드(자체)', null=True)),
                ('삼성카드', models.FloatField(blank=True, null=True)),
                ('신한카드', models.FloatField(blank=True, null=True)),
                ('우리카드', models.FloatField(blank=True, null=True)),
                ('하나카드', models.FloatField(blank=True, null=True)),
                ('현대카드', models.FloatField(blank=True, null=True)),
                ('kb국민카드', models.FloatField(blank=True, db_column='KB국민카드', null=True)),
                ('년월', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'card_members',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CardSales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('대분류', models.TextField(blank=True, null=True)),
                ('카드_종류', models.TextField(blank=True, db_column='카드 종류', null=True)),
                ('사용구분', models.TextField(blank=True, null=True)),
                ('결제_방법', models.TextField(blank=True, db_column='결제 방법', null=True)),
                ('롯데카드', models.FloatField(blank=True, null=True)),
                ('비씨카드_자체_field', models.FloatField(blank=True, db_column='비씨카드(자체)', null=True)),
                ('삼성카드', models.FloatField(blank=True, null=True)),
                ('신한카드', models.FloatField(blank=True, null=True)),
                ('우리카드', models.FloatField(blank=True, null=True)),
                ('하나카드', models.FloatField(blank=True, null=True)),
                ('현대카드', models.FloatField(blank=True, null=True)),
                ('kb국민카드', models.FloatField(blank=True, db_column='KB국민카드', null=True)),
                ('합계', models.FloatField(blank=True, null=True)),
                ('년월', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'card_sales',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChatbotCardMembers',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('대분류', models.TextField()),
                ('카드_종류', models.TextField()),
                ('사용구분', models.TextField()),
                ('결제_방법', models.TextField()),
                ('롯데카드', models.FloatField()),
                ('비씨카드', models.FloatField()),
                ('삼성카드', models.FloatField()),
                ('신한카드', models.FloatField()),
                ('우리카드', models.FloatField()),
                ('하나카드', models.FloatField()),
                ('현대카드', models.FloatField()),
                ('kb국민카드', models.FloatField(db_column='KB국민카드')),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'chatbot_card_members',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChatbotCardSales',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('대분류', models.TextField()),
                ('카드_종류', models.TextField()),
                ('사용구분', models.TextField()),
                ('결제_방법', models.TextField()),
                ('롯데카드', models.FloatField()),
                ('비씨카드', models.FloatField()),
                ('삼성카드', models.FloatField()),
                ('신한카드', models.FloatField()),
                ('우리카드', models.FloatField()),
                ('하나카드', models.FloatField()),
                ('현대카드', models.FloatField()),
                ('kb국민카드', models.FloatField(db_column='KB국민카드')),
                ('합계', models.FloatField()),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'chatbot_card_sales',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CpiCardData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(blank=True, db_column='TIME', null=True)),
                ('합계_pce_pred', models.FloatField(blank=True, db_column='합계_PCE_pred', null=True)),
                ('합계_pce_lower', models.FloatField(blank=True, db_column='합계_PCE_lower', null=True)),
                ('합계_pce_upper', models.FloatField(blank=True, db_column='합계_PCE_upper', null=True)),
                ('합계_cpi_pred', models.FloatField(blank=True, db_column='합계_CPI_pred', null=True)),
                ('합계_cpi_lower', models.FloatField(blank=True, db_column='합계_CPI_lower', null=True)),
                ('합계_cpi_upper', models.FloatField(blank=True, db_column='합계_CPI_upper', null=True)),
                ('식료품_pce_pred', models.FloatField(blank=True, db_column='식료품_PCE_pred', null=True)),
                ('식료품_pce_lower', models.FloatField(blank=True, db_column='식료품_PCE_lower', null=True)),
                ('식료품_pce_upper', models.FloatField(blank=True, db_column='식료품_PCE_upper', null=True)),
                ('식료품_cpi_pred', models.FloatField(blank=True, db_column='식료품_CPI_pred', null=True)),
                ('식료품_cpi_lower', models.FloatField(blank=True, db_column='식료품_CPI_lower', null=True)),
                ('식료품_cpi_upper', models.FloatField(blank=True, db_column='식료품_CPI_upper', null=True)),
                ('의류_잡화_pce_pred', models.FloatField(blank=True, db_column='의류/잡화_PCE_pred', null=True)),
                ('의류_잡화_pce_lower', models.FloatField(blank=True, db_column='의류/잡화_PCE_lower', null=True)),
                ('의류_잡화_pce_upper', models.FloatField(blank=True, db_column='의류/잡화_PCE_upper', null=True)),
                ('의류_잡화_cpi_pred', models.FloatField(blank=True, db_column='의류/잡화_CPI_pred', null=True)),
                ('의류_잡화_cpi_lower', models.FloatField(blank=True, db_column='의류/잡화_CPI_lower', null=True)),
                ('의류_잡화_cpi_upper', models.FloatField(blank=True, db_column='의류/잡화_CPI_upper', null=True)),
                ('연료_pce_pred', models.FloatField(blank=True, db_column='연료_PCE_pred', null=True)),
                ('연료_pce_lower', models.FloatField(blank=True, db_column='연료_PCE_lower', null=True)),
                ('연료_pce_upper', models.FloatField(blank=True, db_column='연료_PCE_upper', null=True)),
                ('연료_cpi_pred', models.FloatField(blank=True, db_column='연료_CPI_pred', null=True)),
                ('연료_cpi_lower', models.FloatField(blank=True, db_column='연료_CPI_lower', null=True)),
                ('연료_cpi_upper', models.FloatField(blank=True, db_column='연료_CPI_upper', null=True)),
                ('가구_가전_pce_pred', models.FloatField(blank=True, db_column='가구/가전_PCE_pred', null=True)),
                ('가구_가전_pce_lower', models.FloatField(blank=True, db_column='가구/가전_PCE_lower', null=True)),
                ('가구_가전_pce_upper', models.FloatField(blank=True, db_column='가구/가전_PCE_upper', null=True)),
                ('가구_가전_cpi_pred', models.FloatField(blank=True, db_column='가구/가전_CPI_pred', null=True)),
                ('가구_가전_cpi_lower', models.FloatField(blank=True, db_column='가구/가전_CPI_lower', null=True)),
                ('가구_가전_cpi_upper', models.FloatField(blank=True, db_column='가구/가전_CPI_upper', null=True)),
                ('의료_보건_pce_pred', models.FloatField(blank=True, db_column='의료/보건_PCE_pred', null=True)),
                ('의료_보건_pce_lower', models.FloatField(blank=True, db_column='의료/보건_PCE_lower', null=True)),
                ('의료_보건_pce_upper', models.FloatField(blank=True, db_column='의료/보건_PCE_upper', null=True)),
                ('의료_보건_cpi_pred', models.FloatField(blank=True, db_column='의료/보건_CPI_pred', null=True)),
                ('의료_보건_cpi_lower', models.FloatField(blank=True, db_column='의료/보건_CPI_lower', null=True)),
                ('의료_보건_cpi_upper', models.FloatField(blank=True, db_column='의료/보건_CPI_upper', null=True)),
                ('여행_교통_pce_pred', models.FloatField(blank=True, db_column='여행/교통_PCE_pred', null=True)),
                ('여행_교통_pce_lower', models.FloatField(blank=True, db_column='여행/교통_PCE_lower', null=True)),
                ('여행_교통_pce_upper', models.FloatField(blank=True, db_column='여행/교통_PCE_upper', null=True)),
                ('여행_교통_cpi_pred', models.FloatField(blank=True, db_column='여행/교통_CPI_pred', null=True)),
                ('여행_교통_cpi_lower', models.FloatField(blank=True, db_column='여행/교통_CPI_lower', null=True)),
                ('여행_교통_cpi_upper', models.FloatField(blank=True, db_column='여행/교통_CPI_upper', null=True)),
                ('오락_문화_pce_pred', models.FloatField(blank=True, db_column='오락/문화_PCE_pred', null=True)),
                ('오락_문화_pce_lower', models.FloatField(blank=True, db_column='오락/문화_PCE_lower', null=True)),
                ('오락_문화_pce_upper', models.FloatField(blank=True, db_column='오락/문화_PCE_upper', null=True)),
                ('오락_문화_cpi_pred', models.FloatField(blank=True, db_column='오락/문화_CPI_pred', null=True)),
                ('오락_문화_cpi_lower', models.FloatField(blank=True, db_column='오락/문화_CPI_lower', null=True)),
                ('오락_문화_cpi_upper', models.FloatField(blank=True, db_column='오락/문화_CPI_upper', null=True)),
                ('교육_pce_pred', models.FloatField(blank=True, db_column='교육_PCE_pred', null=True)),
                ('교육_pce_lower', models.FloatField(blank=True, db_column='교육_PCE_lower', null=True)),
                ('교육_pce_upper', models.FloatField(blank=True, db_column='교육_PCE_upper', null=True)),
                ('교육_cpi_pred', models.FloatField(blank=True, db_column='교육_CPI_pred', null=True)),
                ('교육_cpi_lower', models.FloatField(blank=True, db_column='교육_CPI_lower', null=True)),
                ('교육_cpi_upper', models.FloatField(blank=True, db_column='교육_CPI_upper', null=True)),
                ('숙박_음식_pce_pred', models.FloatField(blank=True, db_column='숙박/음식_PCE_pred', null=True)),
                ('숙박_음식_pce_lower', models.FloatField(blank=True, db_column='숙박/음식_PCE_lower', null=True)),
                ('숙박_음식_pce_upper', models.FloatField(blank=True, db_column='숙박/음식_PCE_upper', null=True)),
                ('숙박_음식_cpi_pred', models.FloatField(blank=True, db_column='숙박/음식_CPI_pred', null=True)),
                ('숙박_음식_cpi_lower', models.FloatField(blank=True, db_column='숙박/음식_CPI_lower', null=True)),
                ('숙박_음식_cpi_upper', models.FloatField(blank=True, db_column='숙박/음식_CPI_upper', null=True)),
                ('공과금_개인_및_전문_서비스_pce_pred', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_PCE_pred', null=True)),
                ('공과금_개인_및_전문_서비스_pce_lower', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_PCE_lower', null=True)),
                ('공과금_개인_및_전문_서비스_pce_upper', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_PCE_upper', null=True)),
                ('공과금_개인_및_전문_서비스_cpi_pred', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_CPI_pred', null=True)),
                ('공과금_개인_및_전문_서비스_cpi_lower', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_CPI_lower', null=True)),
                ('공과금_개인_및_전문_서비스_cpi_upper', models.FloatField(blank=True, db_column='공과금/개인 및 전문 서비스_CPI_upper', null=True)),
            ],
            options={
                'db_table': 'cpi_card_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CurrencyRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cur_unit', models.TextField(blank=True, null=True)),
                ('ttb', models.TextField(blank=True, null=True)),
                ('tts', models.TextField(blank=True, null=True)),
                ('deal_bas_r', models.TextField(blank=True, null=True)),
                ('bkpr', models.TextField(blank=True, null=True)),
                ('yy_efee_r', models.FloatField(blank=True, null=True)),
                ('ten_dd_efee_r', models.FloatField(blank=True, null=True)),
                ('kftc_bkpr', models.TextField(blank=True, null=True)),
                ('kftc_deal_bas_r', models.TextField(blank=True, null=True)),
                ('cur_nm', models.TextField(blank=True, null=True)),
                ('date', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'currency_rate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('action_time', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(blank=True, max_length=200, null=True)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
                ('content_type_id', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app_label', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('applied', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoPlotlyDashDashapp',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('instance_name', models.CharField(blank=True, max_length=100, null=True)),
                ('slug', models.CharField(blank=True, max_length=110, null=True)),
                ('base_state', models.TextField()),
                ('creation', models.DateTimeField(blank=True, null=True)),
                ('update', models.DateTimeField(blank=True, null=True)),
                ('save_on_change', models.IntegerField(blank=True, null=True)),
                ('stateless_app_id', models.IntegerField()),
            ],
            options={
                'db_table': 'django_plotly_dash_dashapp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoPlotlyDashStatelessapp',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('app_name', models.CharField(blank=True, max_length=100, null=True)),
                ('slug', models.CharField(blank=True, max_length=110, null=True)),
            ],
            options={
                'db_table': 'django_plotly_dash_statelessapp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EduDataFCleaned',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('고객번호', models.CharField(blank=True, max_length=50, null=True)),
                ('연령대', models.CharField(blank=True, max_length=50, null=True)),
                ('성별', models.CharField(blank=True, max_length=50, null=True)),
                ('회원등급', models.CharField(blank=True, max_length=50, null=True)),
                ('거주지역_1', models.CharField(blank=True, max_length=50, null=True)),
                ('라이프스테이지', models.CharField(blank=True, max_length=50, null=True)),
                ('총이용금액', models.IntegerField(blank=True, null=True)),
                ('신용카드이용금액', models.IntegerField(blank=True, null=True)),
                ('체크카드이용금액', models.IntegerField(blank=True, null=True)),
                ('가전_가구_주방용품', models.IntegerField(blank=True, db_column='가전/가구/주방용품', null=True)),
                ('보험_병원', models.IntegerField(blank=True, db_column='보험/병원', null=True)),
                ('사무통신_서적_학원', models.IntegerField(blank=True, db_column='사무통신/서적/학원', null=True)),
                ('여행_레져_문화', models.IntegerField(blank=True, db_column='여행/레져/문화', null=True)),
                ('요식업', models.IntegerField(blank=True, null=True)),
                ('용역_수리_건축자재', models.IntegerField(blank=True, db_column='용역/수리/건축자재', null=True)),
                ('유통', models.IntegerField(blank=True, null=True)),
                ('보건위생', models.IntegerField(blank=True, null=True)),
                ('의류_신변잡화', models.IntegerField(blank=True, db_column='의류/신변잡화', null=True)),
                ('자동차_연료_정비', models.IntegerField(blank=True, db_column='자동차/연료/정비', null=True)),
                ('가구', models.IntegerField(blank=True, null=True)),
                ('가전제품', models.IntegerField(blank=True, null=True)),
                ('건물및시설관리', models.IntegerField(blank=True, null=True)),
                ('건축_자재', models.IntegerField(blank=True, db_column='건축/자재', null=True)),
                ('광학제품', models.IntegerField(blank=True, null=True)),
                ('농업', models.IntegerField(blank=True, null=True)),
                ('레져업소', models.IntegerField(blank=True, null=True)),
                ('레져용품', models.IntegerField(blank=True, null=True)),
                ('문화_취미', models.IntegerField(blank=True, db_column='문화/취미', null=True)),
                ('보건_위생', models.IntegerField(blank=True, db_column='보건/위생', null=True)),
                ('보험', models.IntegerField(blank=True, null=True)),
                ('사무_통신기기', models.IntegerField(blank=True, db_column='사무/통신기기', null=True)),
                ('서적_문구', models.IntegerField(blank=True, db_column='서적/문구', null=True)),
                ('수리서비스', models.IntegerField(blank=True, null=True)),
                ('숙박업', models.IntegerField(blank=True, null=True)),
                ('신변잡화', models.IntegerField(blank=True, null=True)),
                ('여행업', models.IntegerField(blank=True, null=True)),
                ('연료판매', models.IntegerField(blank=True, null=True)),
                ('용역서비스', models.IntegerField(blank=True, null=True)),
                ('유통업비영리', models.IntegerField(blank=True, null=True)),
                ('유통업영리', models.IntegerField(blank=True, null=True)),
                ('음식료품', models.IntegerField(blank=True, null=True)),
                ('의료기관', models.IntegerField(blank=True, null=True)),
                ('의류', models.IntegerField(blank=True, null=True)),
                ('일반_휴게음식', models.IntegerField(blank=True, db_column='일반/휴게음식', null=True)),
                ('자동차정비_유지', models.IntegerField(blank=True, db_column='자동차정비/유지', null=True)),
                ('자동차판매', models.IntegerField(blank=True, null=True)),
                ('주방용품', models.IntegerField(blank=True, null=True)),
                ('직물', models.IntegerField(blank=True, null=True)),
                ('학원', models.IntegerField(blank=True, null=True)),
                ('회원제형태업소', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'edu_data_f_cleaned',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FranchiseData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yr', models.TextField(blank=True, null=True)),
                ('indutylclasnm', models.TextField(blank=True, db_column='indutyLclasNm', null=True)),
                ('indutymlsfcnm', models.TextField(blank=True, db_column='indutyMlsfcNm', null=True)),
                ('corpnm', models.TextField(blank=True, db_column='corpNm', null=True)),
                ('brandnm', models.TextField(blank=True, db_column='brandNm', null=True)),
                ('frcscnt', models.BigIntegerField(blank=True, db_column='frcsCnt', null=True)),
                ('newfrcsrgscnt', models.BigIntegerField(blank=True, db_column='newFrcsRgsCnt', null=True)),
                ('ctrtendcnt', models.BigIntegerField(blank=True, db_column='ctrtEndCnt', null=True)),
                ('ctrtcncltncnt', models.BigIntegerField(blank=True, db_column='ctrtCncltnCnt', null=True)),
                ('nmchgcnt', models.BigIntegerField(blank=True, db_column='nmChgCnt', null=True)),
                ('avrgslsamt', models.FloatField(blank=True, db_column='avrgSlsAmt', null=True)),
                ('arunitavrgslsamt', models.FloatField(blank=True, db_column='arUnitAvrgSlsAmt', null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'franchise_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FredData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('fftr', models.FloatField(blank=True, db_column='FFTR', null=True)),
                ('gdp', models.FloatField(blank=True, db_column='GDP', null=True)),
                ('gdp_growth_rate', models.FloatField(blank=True, db_column='GDP Growth Rate', null=True)),
                ('pce', models.FloatField(blank=True, db_column='PCE', null=True)),
                ('core_pce', models.FloatField(blank=True, db_column='Core PCE', null=True)),
                ('cpi', models.FloatField(blank=True, db_column='CPI', null=True)),
                ('core_cpi', models.FloatField(blank=True, db_column='Core CPI', null=True)),
                ('personal_income', models.FloatField(blank=True, db_column='Personal Income', null=True)),
                ('unemployment_rate', models.FloatField(blank=True, db_column='Unemployment Rate', null=True)),
                ('ism_manufacturing', models.FloatField(blank=True, db_column='ISM Manufacturing', null=True)),
                ('durable_goods_orders', models.FloatField(blank=True, db_column='Durable Goods Orders', null=True)),
                ('building_permits', models.FloatField(blank=True, db_column='Building Permits', null=True)),
                ('retail_sales', models.FloatField(blank=True, db_column='Retail Sales', null=True)),
                ('consumer_sentiment', models.FloatField(blank=True, db_column='Consumer Sentiment', null=True)),
                ('nonfarm_payrolls', models.FloatField(blank=True, db_column='Nonfarm Payrolls', null=True)),
                ('jolts_hires', models.FloatField(blank=True, db_column='JOLTS Hires', null=True)),
            ],
            options={
                'db_table': 'fred_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KoreaBaseRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(blank=True, db_column='TIME', null=True)),
                ('bor', models.TextField(blank=True, db_column='BOR', null=True)),
            ],
            options={
                'db_table': 'korea_base_rate',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='KoreaIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TextField(blank=True, db_column='TIME', null=True)),
                ('gdp', models.TextField(blank=True, db_column='GDP', null=True)),
                ('경제성장률', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'korea_index',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TourIntrst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('respond_id', models.BigIntegerField(blank=True, db_column='RESPOND_ID', null=True)),
                ('examin_begin_de', models.DateTimeField(blank=True, db_column='EXAMIN_BEGIN_DE', null=True)),
                ('sexdstn_flag_cd', models.TextField(blank=True, db_column='SEXDSTN_FLAG_CD', null=True)),
                ('agrde_flag_nm', models.TextField(blank=True, db_column='AGRDE_FLAG_NM', null=True)),
                ('answrr_oc_area_nm', models.TextField(blank=True, db_column='ANSWRR_OC_AREA_NM', null=True)),
                ('hshld_income_dgree_nm', models.TextField(blank=True, db_column='HSHLD_INCOME_DGREE_NM', null=True)),
                ('china_tour_intrst_value', models.TextField(blank=True, db_column='CHINA_TOUR_INTRST_VALUE', null=True)),
                ('jp_tour_intrst_value', models.TextField(blank=True, db_column='JP_TOUR_INTRST_VALUE', null=True)),
                ('hongkong_macau_tour_intrst_value', models.TextField(blank=True, db_column='HONGKONG_MACAU_TOUR_INTRST_VALUE', null=True)),
                ('seasia_tour_intrst_value', models.TextField(blank=True, db_column='SEASIA_TOUR_INTRST_VALUE', null=True)),
                ('mdlest_swasia_tour_intrst_value', models.TextField(blank=True, db_column='MDLEST_SWASIA_TOUR_INTRST_VALUE', null=True)),
                ('usa_canada_tour_intrst_value', models.TextField(blank=True, db_column='USA_CANADA_TOUR_INTRST_VALUE', null=True)),
                ('samrc_lamrc_tour_intrst_value', models.TextField(blank=True, db_column='SAMRC_LAMRC_TOUR_INTRST_VALUE', null=True)),
                ('weurp_neurp_tour_intrst_value', models.TextField(blank=True, db_column='WEURP_NEURP_TOUR_INTRST_VALUE', null=True)),
                ('eeurp_tour_intrst_value', models.TextField(blank=True, db_column='EEURP_TOUR_INTRST_VALUE', null=True)),
                ('seurp_tour_intrst_value', models.TextField(blank=True, db_column='SEURP_TOUR_INTRST_VALUE', null=True)),
                ('spcpc_tour_intrst_value', models.TextField(blank=True, db_column='SPCPC_TOUR_INTRST_VALUE', null=True)),
                ('africa_tour_intrst_value', models.TextField(blank=True, db_column='AFRICA_TOUR_INTRST_VALUE', null=True)),
            ],
            options={
                'db_table': 'tour_intrst',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelAdvices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.TextField(blank=True, db_column='Country', null=True)),
                ('travel_advice', models.TextField(blank=True, db_column='Travel_Advice', null=True)),
            ],
            options={
                'db_table': 'travel_advices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelCaution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.TextField(blank=True, db_column='Country', null=True)),
                ('country_en', models.TextField(blank=True, db_column='Country_EN', null=True)),
                ('iso_alpha_3', models.TextField(blank=True, db_column='ISO_Alpha_3', null=True)),
            ],
            options={
                'db_table': 'travel_caution',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelCautions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.TextField(blank=True, db_column='Country', null=True)),
                ('travel_caution', models.IntegerField(blank=True, db_column='Travel_Caution', null=True)),
                ('travel_restriction', models.IntegerField(blank=True, db_column='Travel_Restriction', null=True)),
                ('departure_advisory', models.IntegerField(blank=True, db_column='Departure_Advisory', null=True)),
                ('travel_ban', models.IntegerField(blank=True, db_column='Travel_Ban', null=True)),
                ('special_travel_advisory', models.IntegerField(blank=True, db_column='Special_Travel_Advisory', null=True)),
            ],
            options={
                'db_table': 'travel_cautions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelNaverSearchAll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.TextField(blank=True, null=True)),
                ('period', models.TextField(blank=True, null=True)),
                ('ratio', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'travel_naver_search_all',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelTrend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.TextField(blank=True, null=True)),
                ('date', models.TextField(blank=True, null=True)),
                ('ratio', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'travel_trend',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TravelTrendCv',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.TextField(blank=True, null=True)),
                ('trend_growth', models.FloatField(blank=True, null=True)),
                ('trend_var', models.FloatField(blank=True, null=True)),
                ('trend_cv', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'travel_trend_cv',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('response', models.TextField()),
                ('is_power_mode', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(max_length=100)),
                ('like_count', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
    ]
